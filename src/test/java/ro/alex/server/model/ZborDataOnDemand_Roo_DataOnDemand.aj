// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.alex.server.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import ro.alex.server.model.Avion;
import ro.alex.server.model.Oras;
import ro.alex.server.model.Zbor;
import ro.alex.server.model.ZborDataOnDemand;

privileged aspect ZborDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ZborDataOnDemand: @Component;
    
    private Random ZborDataOnDemand.rnd = new SecureRandom();
    
    private List<Zbor> ZborDataOnDemand.data;
    
    public Zbor ZborDataOnDemand.getNewTransientZbor(int index) {
        Zbor obj = new Zbor();
        setAvion(obj, index);
        setCod(obj, index);
        setData(obj, index);
        setDeschis(obj, index);
        setEscala(obj, index);
        setNumarKm(obj, index);
        setOrasd(obj, index);
        setOrasp(obj, index);
        return obj;
    }
    
    public void ZborDataOnDemand.setAvion(Zbor obj, int index) {
        Avion avion = null;
        obj.setAvion(avion);
    }
    
    public void ZborDataOnDemand.setCod(Zbor obj, int index) {
        String cod = "cod_" + index;
        obj.setCod(cod);
    }
    
    public void ZborDataOnDemand.setData(Zbor obj, int index) {
        Date data = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setData(data);
    }
    
    public void ZborDataOnDemand.setDeschis(Zbor obj, int index) {
        Boolean deschis = Boolean.TRUE;
        obj.setDeschis(deschis);
    }
    
    public void ZborDataOnDemand.setEscala(Zbor obj, int index) {
        Boolean escala = Boolean.TRUE;
        obj.setEscala(escala);
    }
    
    public void ZborDataOnDemand.setNumarKm(Zbor obj, int index) {
        Integer numarKm = new Integer(index);
        obj.setNumarKm(numarKm);
    }
    
    public void ZborDataOnDemand.setOrasd(Zbor obj, int index) {
        Oras orasd = null;
        obj.setOrasd(orasd);
    }
    
    public void ZborDataOnDemand.setOrasp(Zbor obj, int index) {
        Oras orasp = null;
        obj.setOrasp(orasp);
    }
    
    public Zbor ZborDataOnDemand.getSpecificZbor(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Zbor obj = data.get(index);
        Long id = obj.getId();
        return Zbor.findZbor(id);
    }
    
    public Zbor ZborDataOnDemand.getRandomZbor() {
        init();
        Zbor obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Zbor.findZbor(id);
    }
    
    public boolean ZborDataOnDemand.modifyZbor(Zbor obj) {
        return false;
    }
    
    public void ZborDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Zbor.findZborEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Zbor' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Zbor>();
        for (int i = 0; i < 10; i++) {
            Zbor obj = getNewTransientZbor(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
