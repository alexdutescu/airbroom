// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.alex.server.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.alex.server.model.Loc;
import ro.alex.server.model.Persoana;
import ro.alex.server.model.Rezervare;
import ro.alex.server.model.RezervareDataOnDemand;
import ro.alex.server.model.ZborDataOnDemand;

privileged aspect RezervareDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RezervareDataOnDemand: @Component;
    
    private Random RezervareDataOnDemand.rnd = new SecureRandom();
    
    private List<Rezervare> RezervareDataOnDemand.data;
    
    @Autowired
    ZborDataOnDemand RezervareDataOnDemand.zborDataOnDemand;
    
    public Rezervare RezervareDataOnDemand.getNewTransientRezervare(int index) {
        Rezervare obj = new Rezervare();
        setCod(obj, index);
        setCost(obj, index);
        setDusIntors(obj, index);
        setLocDus(obj, index);
        setLocIntors(obj, index);
        setNume(obj, index);
        setPersoana(obj, index);
        setPrenume(obj, index);
        return obj;
    }
    
    public void RezervareDataOnDemand.setCod(Rezervare obj, int index) {
        String cod = "cod_" + index;
        obj.setCod(cod);
    }
    
    public void RezervareDataOnDemand.setCost(Rezervare obj, int index) {
        Double cost = new Integer(index).doubleValue();
        obj.setCost(cost);
    }
    
    public void RezervareDataOnDemand.setDusIntors(Rezervare obj, int index) {
        Boolean dusIntors = Boolean.TRUE;
        obj.setDusIntors(dusIntors);
    }
    
    public void RezervareDataOnDemand.setLocDus(Rezervare obj, int index) {
        Loc locDus = null;
        obj.setLocDus(locDus);
    }
    
    public void RezervareDataOnDemand.setLocIntors(Rezervare obj, int index) {
        Loc locIntors = null;
        obj.setLocIntors(locIntors);
    }
    
    public void RezervareDataOnDemand.setNume(Rezervare obj, int index) {
        String nume = "nume_" + index;
        obj.setNume(nume);
    }
    
    public void RezervareDataOnDemand.setPersoana(Rezervare obj, int index) {
        Persoana persoana = null;
        obj.setPersoana(persoana);
    }
    
    public void RezervareDataOnDemand.setPrenume(Rezervare obj, int index) {
        String prenume = "prenume_" + index;
        obj.setPrenume(prenume);
    }
    
    public Rezervare RezervareDataOnDemand.getSpecificRezervare(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Rezervare obj = data.get(index);
        Long id = obj.getId();
        return Rezervare.findRezervare(id);
    }
    
    public Rezervare RezervareDataOnDemand.getRandomRezervare() {
        init();
        Rezervare obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Rezervare.findRezervare(id);
    }
    
    public boolean RezervareDataOnDemand.modifyRezervare(Rezervare obj) {
        return false;
    }
    
    public void RezervareDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Rezervare.findRezervareEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Rezervare' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Rezervare>();
        for (int i = 0; i < 10; i++) {
            Rezervare obj = getNewTransientRezervare(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
