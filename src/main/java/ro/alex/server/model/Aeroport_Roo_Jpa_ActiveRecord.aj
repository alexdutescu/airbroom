// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.alex.server.model;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import ro.alex.server.model.Aeroport;

privileged aspect Aeroport_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Aeroport.entityManager;
    
    public static final EntityManager Aeroport.entityManager() {
        EntityManager em = new Aeroport().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Aeroport.countAeroports() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Aeroport o", Long.class).getSingleResult();
    }
    
    public static List<Aeroport> Aeroport.findAllAeroports() {
        return entityManager().createQuery("SELECT o FROM Aeroport o", Aeroport.class).getResultList();
    }
    
    public static Aeroport Aeroport.findAeroport(Long id) {
        if (id == null) return null;
        return entityManager().find(Aeroport.class, id);
    }
    
    public static List<Aeroport> Aeroport.findAeroportEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Aeroport o", Aeroport.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Aeroport.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Aeroport.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Aeroport attached = Aeroport.findAeroport(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Aeroport.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Aeroport.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Aeroport Aeroport.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Aeroport merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
