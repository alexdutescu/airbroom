// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package ro.alex.client.managed.activity;
import com.google.gwt.activity.shared.Activity;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.place.shared.Place;
import com.google.gwt.place.shared.PlaceController;
import com.google.inject.Inject;
import ro.alex.client.managed.request.ApplicationEntityTypesProcessor;
import ro.alex.client.managed.request.ApplicationRequestFactory;
import ro.alex.client.proxy.AbonamentProxy;
import ro.alex.client.proxy.AeroportProxy;
import ro.alex.client.proxy.AvionProxy;
import ro.alex.client.proxy.ClasaProxy;
import ro.alex.client.proxy.CompanieProxy;
import ro.alex.client.proxy.ContProxy;
import ro.alex.client.proxy.LocProxy;
import ro.alex.client.proxy.OrasProxy;
import ro.alex.client.proxy.PersoanaProxy;
import ro.alex.client.proxy.RezervareProxy;
import ro.alex.client.proxy.UserProxy;
import ro.alex.client.proxy.ZborProxy;
import ro.alex.client.scaffold.place.ProxyPlace;

public abstract class ApplicationDetailsActivities_Roo_Gwt implements ActivityMapper {

    protected ApplicationRequestFactory requests;

    protected PlaceController placeController;

    public Activity getActivity(Place place) {
        if (!(place instanceof ProxyPlace)) {
            return null;
        }
        final ProxyPlace proxyPlace = (ProxyPlace) place;
        return new ApplicationEntityTypesProcessor<Activity>() {

            @Override
            public void handleAbonament(AbonamentProxy proxy) {
                setResult(new AbonamentActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleAeroport(AeroportProxy proxy) {
                setResult(new AeroportActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleAvion(AvionProxy proxy) {
                setResult(new AvionActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleClasa(ClasaProxy proxy) {
                setResult(new ClasaActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleCompanie(CompanieProxy proxy) {
                setResult(new CompanieActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleCont(ContProxy proxy) {
                setResult(new ContActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleLoc(LocProxy proxy) {
                setResult(new LocActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleOras(OrasProxy proxy) {
                setResult(new OrasActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handlePersoana(PersoanaProxy proxy) {
                setResult(new PersoanaActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleRezervare(RezervareProxy proxy) {
                setResult(new RezervareActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleUser(UserProxy proxy) {
                setResult(new UserActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleZbor(ZborProxy proxy) {
                setResult(new ZborActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }
        }.process(proxyPlace.getProxyClass());
    }
}
